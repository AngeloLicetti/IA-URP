;Problema 1
;LLenar
(defun LLENAR()
	(setq L NIL)
	(loop ((minusp (setq E(READ)))(REVERSE L))
	(push E L)
))

;Mostrar
(DEFUN MOSTRAR()
		(LOOP ((NULL L))
			(PRINC (POP L))
			(PRINC " ")		
		)
)


;Lista
(defun lista (L)
			(setq X())
			(loop ((null L) X)
			(push (car L) X)(pop L)
))

;Problema 2
;Promedio
(defun SUMA(L)((null L) 0)
			(+ (CAR L) (SUMA (CDR L)))
)	

(defun Promedio(L)((null L) 0)
			(/ (SUMA L) (LENGTH L)))


;Problema 3
;Invertir
(defun INVERSA(L)
			(SETQ X())
			(LOOP ((NULL L) X)
			(PUSH (CAR L) X)
			(POP L)
))

;Problema 4
;Reordenar pares e izquierda
(defun REORDENA (L)
			(SETQ PA ())
			(SETQ IM ())
			(SETQ X ())
			(LOOP ((NULL L) X)
				(PROGN ((= (MOD (CAR L) 2) 0)(PUSH (CAR L) PA)))
				(PROGN ((/= (MOD (CAR L) 2) 0)(PUSH (CAR L) IM)))
				(POP L)
				(PROGN ((= (LENGTH L) 0)(SETQ X (APPEND (ORDENA IM)(ORDENA PA)))))
))

;Problema 5
;primeros primos antes del N
(defun PrimosN N
		((ZEROP (CAR N)) NIL)
		((null N) 0)
		(SETQ X())
		(SETQ I 1)
		(loop ((> I (CAR N)) (LISTA X))
			(SETQ C 0)
			(Conteo (CAR N))
			(PROGN ((= C 2)(PUSH I X)))
			(SETQ I (+ I 1))
		)
)

(defun Conteo N
		(SETQ NUM I)
		(LOOP ((< NUM 1))
			(PROGN ((= (MOD I NUM) 0)(SETQ C (+ C 1))))
			(SETQ NUM (- NUM 1))
		)
)


;Problema 6
;Producto de factores primos
(defun FacPrimos N
			((ZEROP (CAR N)) 0)
			((null N) 0)
			(SETQ X ())
			(SETQ M 2)
			(LOOP ((= (CAR N) 1 ) (LISTA X))
			(PROGN ((= (MOD (CAR N) M) 0)(PUSH (CAR M) X)(SETQ N (TRUNCATE (CAR N) M))))
			(PROGN ((/= (MOD (CAR N) M) 0)(SETQ M (+ M 1))))
))


;Problema 7
(defun Primos N
			((ZEROP (CAR N)) 0)
			((null N) 0)
			(SETQ K ())
			(SETQ L (FacPrimos (CAR N)))
			(LOOP ((NULL L) (LISTA K))
			(PROGN ((EQL (CAR L)(CAR (CDR L)))(POP L)))
			(PROGN ((NOT (EQL (CAR L)(CAR (CDR L))))(PUSH (POP L) K)))
))

;--------------------------------------------------------------------------
;Ordenar
(defun ORDENA(L)
			(SETQ I 0 )
			(LOOP ((= (- (LENGTH L) 1) I) L)
			(SETQ D (+ I 1))
			(DERECHA L)
			(SETQ I (+ I 1))
))

(defun DERECHA (L)
			(LOOP ((= D (LENGTH L)))
			(PROGN ((< (NTH D L) (NTH I L))(SWAP L)))
				(SETQ D (+ D 1))			

))

(defun SWAP (L) 
			(SETQ AD (NTH I L))
			(SETQ AI (NTH D L))
			(SETF (NTH D L) AD)
			(SETF (NTH I L) AI)
)



;Problema 8
;MCD
(defun MCD (L)
		(ORDENA L)
		(SETQ I 0)
		(SETQ ME (NTH 0 L))
		(LOOP ((= I (- (LENGTH L) 1)) ME)
		(PROGN ((= (MOD (NTH I L) ME) 0)(SETQ I (+ I 1))))
		(PROGN ((/= (MOD (NTH I L) ME) 0)(SETQ I 0)(SETQ ME (- ME 1))))
))

;Problema 9
;MCM
(defun MCM (L)
		(ORDENA L)
		(SETQ I 0)
		(SETQ MA (NTH (- (LENGTH L) 1) L))
		(loop ((= I (- (LENGTH L) 1)) MA)
		(PROGN ((= (MOD MA (NTH I L)) 0)(SETQ I (+ I 1))))
		(PROGN ((/= (MOD MA (NTH I L)) 0)(SETQ I 0)(SETQ MA (+ MA 1))))
))


(SETQ M1 '((1 2 3)(4 5 6))
      M2 '((7 8 9)(10 11 12)(13 14 15)))

;SUMA DE MATRICES
(DEFUN P3 (M1 M2)
	  (LOOP ((NULL M1) (REVERSE M3))
	  (SUMM (POP M1) (POP M2))))
(DEFUN SUMM (X Y)
	  (PUSH (MAPCAR '+ X Y) M3))

;Problema 12

;MULT DE MATRICES
(DEFUN P4 (M1 M2 M3)
	  (LOOP ((NULL M1)(REVERSE M3))
	  (SETQ MA (MAKE-LIST (LENGTH M2) 0))
	  (PUSH (AUX (POP M1) M2) M3)))

(DEFUN AUX (X Y)
	   (LOOP ((NULL X) MA)
	   (SETQ MA (MAPCAR '+ MA
	   (MAPCAR '* (MAKE-LIST (LENGTH M2) (POP X)) (POP Y))))))

;Problema 20
;PIRAMIDE DE PASCAL
(DEFUN P5 (N)
	  ((< N 0) (REVERSE (REVERSE M)))
	  (SETQ MA '())
	  (PUSH (FILAS N N) M)
	  (P5 (SUB1 N)))

(DEFUN FILAS (X Y)
	     ((< Y 0) MA)
	     (PUSH (COM X Y) MA)
	     (FILAS X (SUB1 Y)))

(DEFUN COM (X Y)
	   (/ (FAC X 1) (* (FAC Y 1) (FAC (- X Y) 1))))

(DEFUN FAC (Z S)
	   ((= Z 0) S)
	   (SETQ S (* S Z))
	   (FAC (- Z 1) S))





