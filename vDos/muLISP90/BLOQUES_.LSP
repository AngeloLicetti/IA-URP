(defun bloques (CM ARRIBA ABAJO)
    (setq CM '( (C B) (B A) (A MESA)	(D E) (E MESA)	  (F MESA))  )
    (loop (mensaje "ARRIBA: ")
	(setq ARRIBA (read))
	((eq ARRIBA '*fin*)  )
	(mensaje "ABAJO: ")
	(setq ABAJO (read))
	(coloca ARRIBA ABAJO)
	(mensaje CM))
)

(defun coloca (ARRIBA ABAJO)
    ((member (list ARRIBA ABAJO) CM 'equal) )
    (libera ARRIBA)
    (libera ABAJO)
    (toma ARRIBA)
    (mueve ARRIBA ABAJO)
    (suelta ARRIBA ABAJO)
)

(defun libera (BLOQUE E)
    ((eq BLOQUE 'MESA))
    (setq E (encima BLOQUE))
    ((null E))
    (coloca E 'MESA)
)

(defun encima (BLOQUE AUX)
    (setq AUX CM)
    (loop ((null AUX) NIL)
	((eq BLOQUE (cadar AUX))
	    (caar AUX)
	)
	(pop AUX)
    )
)

(defun toma (BLOQUE)
    (mensaje "toma " BLOQUE)
)

(defun mueve (ARRIBA ABAJO)
    (setq CM (remove (assoc ARRIBA CM) CM 'equal))
    (mensaje "mueve " ARRIBA " sobre " ABAJO)
)

(defun suelta (ARRIBA ABAJO)
    (mensaje "suelta " ARRIBA " sobre " ABAJO)
    (push (list ARRIBA ABAJO) CM)
)

(defun mensaje L
    ((null L) NIL)
    (terpri)
    (loop
	((null L))
	(princ (pop L))
    )
)
